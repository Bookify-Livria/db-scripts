USERS ✔
    ID (PK)
    NICKNAME
    USERNAME (UNIQUE)
    PHRASE
    AVATAR_URL
    EMAIL (UNIQUE)
    PASSWORD
    PLAN_TYPE (ENUM: 'basic', 'premium')
    CREATED_AT
    IS_ACTIVE (BOOLEAN)

CREATE TABLE USERS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NICKNAME VARCHAR(100),
    USERNAME VARCHAR(100) UNIQUE NOT NULL,
    PHRASE TEXT,
    AVATAR_URL TEXT,
    EMAIL VARCHAR(255) UNIQUE NOT NULL,
    PASSWORD VARCHAR(255) NOT NULL,
    PLAN_TYPE ENUM('basic', 'premium') NOT NULL DEFAULT 'basic',
    CREATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
    IS_ACTIVE BOOLEAN DEFAULT TRUE
);

<===============================================================>

PLANS ✔
    ID (PK)
    NAME (UNIQUE)
    DESCRIPTION
    PRICE (DECIMAL)
    FEATURES_EN (TEXT)
    FEATURES_ES (TEXT)

CREATE TABLE PLANS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NAME VARCHAR(100) UNIQUE NOT NULL,
    DESCRIPTION TEXT,
    PRICE_USD DECIMAL(10,2),
    PRICE_PEN DECIMAL(10,2),
    FEATURES_EN TEXT,
    FEATURES_ES TEXT
);
 
<===============================================================>

CLIENTS ✔
    ID (PK)
    USER_ID (FK -> USERS.ID)
    NAME
    PHONE
    ADDRESS
    CITY
    COUNTRY
    POSTAL_CODE

CREATE TABLE CLIENTS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT,
    NAME VARCHAR(150),
    PHONE VARCHAR(50),
    ADDRESS TEXT,
    CITY VARCHAR(100),
    COUNTRY VARCHAR(100),
    POSTAL_CODE VARCHAR(20),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

<===============================================================>

SUBSCRIPTIONS ✔
    ID (PK)
    USER_ID (FK -> USERS.ID)
    PLAN_TYPE (FK -> PLANS.ID)
    STATUS (ENUM: 'active', 'cancelled', 'expired')
    STARTED_AT
    EXPIRES_AT

CREATE TABLE SUBSCRIPTIONS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    PLAN_TYPE INT NOT NULL,
    STATUS ENUM('active', 'cancelled', 'expired') NOT NULL DEFAULT 'active',
    STARTED_AT DATETIME NOT NULL,
    EXPIRES_AT DATETIME NOT NULL,
    AMOUNT DECIMAL(10,2),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
    FOREIGN KEY (PLAN_TYPE) REFERENCES PLANS(ID)
);

<===============================================================>

GENRES  ✔
    ID (PK)
    NAME_EN (UNIQUE)
    NAME_ES (UNIQUE)
    DESCRIPTION_EN
    DESCRIPTION_ES

CREATE TABLE GENRES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NAME_EN VARCHAR(100) UNIQUE NOT NULL,
    NAME_ES VARCHAR(100) UNIQUE NOT NULL,
    DESCRIPTION_EN TEXT,
    DESCRIPTION_ES TEXT
);

<===============================================================>

BOOKS
    ID (PK)
    TITLE
    DESCRIPTION
    AUTHOR
    PRICE
    STOCK_COUNT
    COVER_URL
    GENRE (FK -> GENRES.ID)
    PUBLISHER
    LANGUAGE
    RATING_AVG
    PAGE_COUNT
    DISCOUNT_PERCENTAGE

CREATE TABLE BOOKS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    TITLE VARCHAR(255) NOT NULL,
    DESCRIPTION TEXT,
    AUTHOR VARCHAR(150) NOT NULL,
    PRICE DECIMAL(10,2) NOT NULL,
    STOCK_COUNT INT DEFAULT 0,
    COVER_URL TEXT,
    GENRE INT NOT NULL,
    PUBLISHER VARCHAR(150),
    LANGUAGE VARCHAR(10),
    RATING_AVG DECIMAL(3,2),
    PAGE_COUNT INT,
    DISCOUNT_PERCENTAGE DECIMAL(5,2) DEFAULT 0.00,
    FOREIGN KEY (GENRE) REFERENCES GENRES(ID)
);

<===============================================================>

COMMUNITIES ✔
    ID
    NAME
    DESCRIPTION
    TYPE (FK -> GENRES.ID)
    COVER_URL
    BANNER_URL
    MEMBER_COUNT
    CREATED_AT
    ADMIN_ID (FK -> COMMUNITY_MEMBERS.ID = ROLE 'admin')

CREATE TABLE COMMUNITIES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    DESCRIPTION TEXT,
    TYPE INT NOT NULL,
    COVER_URL TEXT,
    BANNER_URL TEXT,
    MEMBER_COUNT INT DEFAULT 0,
    CREATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
    ADMIN_ID INT, -- Se agregará la FK después
    FOREIGN KEY (TYPE) REFERENCES GENRES(ID)
);

ALTER TABLE COMMUNITIES
ADD CONSTRAINT fk_admin_id FOREIGN KEY (ADMIN_ID) REFERENCES COMMUNITY_MEMBERS(ID);

<===============================================================>

COMMUNITY_MEMBERS ✔
    ID (PK)
    USER_ID (FK -> USERS.ID)
    COMMUNITY_ID (FK -> COMMUNITIES.ID)
    ROLE (ENUM: 'member', 'moderator', 'administrator')

CREATE TABLE COMMUNITY_MEMBERS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    COMMUNITY_ID INT NOT NULL,
    ROLE ENUM('member', 'moderator', 'administrator') NOT NULL DEFAULT 'member',
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
    FOREIGN KEY (COMMUNITY_ID) REFERENCES COMMUNITIES(ID)
);

<===============================================================>

REVIEWS
    ID (PK)
    USER_ID (FK -> USERS.ID)
    BOOK_ID (FK -> BOOKS.ID)
    RATING (INT)
    COMMENT (TEXT)

CREATE TABLE REVIEWS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    BOOK_ID INT NOT NULL,
    RATING INT CHECK (RATING BETWEEN 1 AND 5),
    COMMENT TEXT,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
    FOREIGN KEY (BOOK_ID) REFERENCES BOOKS(ID)
);

<===============================================================>

POSTS
    ID
    USER_ID (FK -> USERS.ID)
    COMMUNITY_ID (FK -> COMMUNITIES.ID)
    CONTENT
    IMAGE_URL
    CREATED_AT
    LIKE_COUNT
    COMMENT_COUNT
    CREATED_AT

CREATE TABLE POSTS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    COMMUNITY_ID INT NOT NULL,
    CONTENT TEXT NOT NULL,
    IMAGE_URL TEXT,
    LIKE_COUNT INT DEFAULT 0,
    COMMENT_COUNT INT DEFAULT 0,
    CREATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
    FOREIGN KEY (COMMUNITY_ID) REFERENCES COMMUNITIES(ID)
);

<===============================================================>

COMMENTS
    ID (PK)
    USER_ID (FK -> USERS.ID)
    POST_ID (FK -> POSTS.ID)
    PARENT_ID (FK -> COMMENTS.ID) -- para respuestas a comentarios
    CONTENT
    LIKE_COUNT
    CREATED_AT

CREATE TABLE COMMENTS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    POST_ID INT NOT NULL,
    PARENT_ID INT DEFAULT NULL,
    CONTENT TEXT NOT NULL,
    LIKE_COUNT INT DEFAULT 0,
    CREATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
    FOREIGN KEY (POST_ID) REFERENCES POSTS(ID),
    FOREIGN KEY (PARENT_ID) REFERENCES COMMENTS(ID)
);

<===============================================================>

LIKES
    ID (PK)
    USER_ID (FK -> USERS.ID)
    LIKEABLE_ID (INT) -- ID del objeto que recibe el like
    LIKEABLE_TYPE (ENUM: 'post', 'comment')
    CREATED_AT

CREATE TABLE LIKES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    LIKEABLE_ID INT NOT NULL,
    LIKEABLE_TYPE ENUM('post', 'comment') NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

CART 
    ID
    USER_ID (FK -> USERS.ID)
    TOTAL_PRICE
    CREATED_AT

CART_ITEM
    ID
    QUANTITY
    UNIT_PRICE
    CART_ID (FK -> CART.ID)
    BOOK_ID (FK -> BOOKS.ID)

ORDERS
    ID (PK)
    USER_ID (FK -> USERS.ID)
    CLIENT_ID (FK -> CLIENTS.ID) -- dirección de envío
    TOTAL_AMOUNT
    STATUS (ENUM: 'pending', 'confirmed', 'processing', 'shipped', 'delivered')
    NOTES
    CREATED_AT
    SHIPPED_AT
    DELIVERED_AT

ORDERS_ITEM
    ID (PK)
    ORDER_ID (FK -> ORDERS.ID)
    BOOK_ID (FK -> BOOKS.ID)
    QUANTITY
    UNIT_PRICE

NOTIFICATIONS
    ID
    TYPE
    MESSAGE

WISHLISTS
    ID (PK)
    USER_ID (FK -> USERS.ID)
    NAME
    IS_PUBLIC
    CREATED_AT
    
WISHLIST_ITEMS
    ID (PK)
    WISHLIST_ID (FK -> WISHLISTS.ID)
    BOOK_ID (FK -> BOOKS.ID)

COUPONS
    ID (PK)
    CODE (UNIQUE)
    DESCRIPTION
    DISCOUNT_TYPE (ENUM: 'percentage', 'fixed_amount')
    DISCOUNT_VALUE (DECIMAL)
    MIN_ORDER_AMOUNT (DECIMAL)
    VALID_FROM
    VALID_UNTIL

USER_COUPONS
    ID (PK)
    USER_ID (FK -> USERS.ID)
    COUPON_ID (FK -> COUPONS.ID)
    ORDER_ID (FK -> ORDERS.ID)